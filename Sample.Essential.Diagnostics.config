<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <connectionStrings>
    <!--
      diagnostics_regsql.exe tool
	  
      Use the following command line to install the default database on the 
      local SQL instance, using Windows credentials:
	  
      .\diagnostics_regsql.exe -E -AD
    -->
    <add name="diagnosticsdb" 
      providerName="System.Data.SqlClient" 
      connectionString="server=.;database=diagnosticsdb;Integrated Security=SSPI" />
  </connectionStrings>
  <system.diagnostics>
    <sharedListeners>
      <!-- 
        Common listener configuration includes name, type, initializeData,
        and traceOutputOptions. A listener may also have a filter.
        
        Note: If you try to add a filter to an existing listener (that doesn't already 
        have a filter) you will cause a NullReferenceException when Trace.Refresh()
        is called (such as by TraceConfigurationMonitor).
        
        A work around is to also change the name of the listener (effectively 
        creating a new one).
        
        <add 
          name="" 
          type="" 
          initializeData="" 
          traceOutputOptions="None,ProcessId,LogicalOperationStack,ThreadId,DateTime,Timestamp,Callstack"
          >
          <filter 
            type="" 
            initializeData="" 
            />
        </add>
        -->
      
      <!-- 
      Essential.Diagnostics Listeners
      -->

      <!--
        BufferedEmailTraceListener - Adds formatted trace messages to a buffer and sends an email when the process exits, or on request.
        
        Intended to be used in console apps which will send all warning/error traces via one Email message at the end of the hosting 
        process. The subject is extracted from the first line of traces. If there’s no trace, this listener will not send anything.
        
        initializeData - Email address of the recipient. Multiple recipients may be separated by commas.

        traceOutputOptions - Ignored.
        
        maxConnections - Maximum SMTP client connections in pool. Default 2 connections.

        subjectTemplate	- With a subject extracted from a trace message, the listener will substitute the subject with additional information. 

        bodyTemplate - The listener will substitute all trace messages with additional information to form the body of the email message. 
          {Message} is substituted with all trace messages formatted with traceTemplate.

        traceTemplate - Substitute a trace message with additional information.

        <add name="bufferedEmail"
          type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics"
          initalizeData=""
          maxConnections="2"
          subjectTemplate="{MessagePrefix} - Machine: {MachineName}; User: {User}; Process: {Process}; AppDomain: {AppDomain}"
          bodyTemplate="Time: {LocalDateTime}&#xD;&#xA;Machine: {MachineName}&#xD;&#xA;User: {User}&#xD;&#xA;Process: {Process}&#xD;&#xA;AppDomain: {AppDomain}&#xD;&#xA;&#xD;&#xA;{Message}"
          traceTemplate="{LocateDateTime:HH':'mm':'ss} {EventType} {ThreadId} {Message}"
          />
      -->
      <add name="bufferedEmail"
        type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics"
        initializeData="user1@example.org,user2@example.org">
        <filter type="System.Diagnostics.EventTypeFilter"
                initializeData="Warning" />
      </add>

      <!--
        ColoredConsoleTraceListener - Writes to the console output or error stream,
        using color to highlight event types and allowing a customised output format.
        
        The event and context information can be formatted using a custom format
        string containing argument tokens in curly braces. Standard .NET formatting
        can be applied to these values, e.g. "{DateTime:yyyy-MM-dd}" outputs the
        year, month and day.
        
        The following parameters are available in the template string:
        Data, Data0, EventType, Id, Message, ActivityId, RelatedActivityId, Source, 
        Callstack, DateTime (or UtcDateTime), LocalDateTime, LogicalOperationStack, 
        ProcessId, ThreadId, Timestamp, MachineName, ProcessName, ThreadName,
        ApplicationName.

        The default format is "{Source} {EventType}: {Id} : {Message}", and default colors
        used are Red for Critical, DarkRed for Error, Yellow for Warning, DarkCyan for Verbose,
        and Gray for all other messages.
                
        initalizeData - if false (default) the listener writes to the console output stream;
        if true the listener writes to the console error stream instead.
        
        traceOutputOptions - are written on separate lines after each trace output in a fixed
        format; largely redundant as the template can be used to format as desired
        
        activityTracingColor (and other Color properties) - ConsoleColor to use for the corresponding
        events

        convertWriteToEvent - if false (default), calls to Trace.Write() and Trace.WriteLine() are output
        directly to the console stream; if true, these messages are converted to event traces with
        a TraceEventType of Verbose (and formatted the same as other events).
        
        template - the format template to use (see above for values)
        
        <add name="coloredconsole"
          type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics"
          initalizeData="false|true"
          traceOutputOptions="ProcessId,LogicalOperationStack,ThreadId,DateTime,Timestamp,Callstack"
          activityTracingColor="Black|Blue|Cyan|DarkBlue|DarkCyan|DarkGray|DarkGreen|DarkMagenta|DarkRed|DarkYellow|Gray|Green|Magenta|Red|White|Yellow"
          convertWriteToEvent="false|true"
          criticalColor="<color>"
          errorColor="<color>"
          informationColor="<color>"
          resumeColor="<color>"
          startColor="<color>"
          stopColor="<color>"
          suspendColor="<color>"
          template=""
          transferColor="<color>" 
          verboseColor="<color>"
          warningColor="<color>"
          />
      -->
      <add name="coloredconsole"
        type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics"
        template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
        convertWriteToEvent="true" />

      <!--
        EmailTraceListener - Adds formatted trace messages to a buffer and sends an email when the process exits, or on request.
        
	      Sends each trace message received in an email, using the specified subject and 
        body templates.
        
        It is strongly recommended to set a filter to only accept Warning and above errors,
        or otherwise reduce the number of trace events that are processed by this listener
	      to avoid flooding.

        Sending an email is an expensive operation, so messages are queued and sent on
        a separate thread. If there is a flood of messages exceeding the queue size then
        messages will be dropped.
        
        initializeData - Email address of the recipient. Multiple recipients may be separated by commas.

        traceOutputOptions - Ignored.
        
        maxConnections - Maximum SMTP client connections in pool. Default 2 connections.

        subjectTemplate	- With a subject extracted from a trace message, the listener will substitute the subject with additional information. 

        bodyTemplate - The listener will substitute all trace messages with additional information to form the body of the email message. 

        <add name="email"
          type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics"
          initalizeData=""
          maxConnections="2"
          subjectTemplate="{MessagePrefix} - Machine: {MachineName}; User: {User}; Process: {Process}; AppDomain: {AppDomain}"
          bodyTemplate="Time: {LocalDateTime}&#xD;&#xA;Machine: {MachineName}&#xD;&#xA;User: {User}&#xD;&#xA;Process: {Process}&#xD;&#xA;AppDomain: {AppDomain}&#xD;&#xA;&#xD;&#xA;{Message}"
          />
      -->
      <add name="email"
        type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics"
        initializeData="user1@example.org,user2@example.org">
        <filter type="System.Diagnostics.EventTypeFilter"
                initializeData="Warning" />
      </add>

      <!--
        InMemoryTraceListener - Records trace events in memory, within a circular buffer. 
        The buffer limit can be set by the initialization data.
		
        Trace events are copied to an immutable format, so values are recorded as at the
        time of the trace. A copy of the current buffer can be retrieved from the object.
		
        This class can be useful for testing.
		
        initalizeData - integer size of the circular buffer; the default is 20.

        traceOutputOptions - ignored
		
        <add name="inmemory"
          type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" 
          initalizeData="20"
		  />
	  -->
      <add name="inmemory"
        type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" />
      
      <!--
        RollingFileTraceListener - Writes to a text file, rolling to a new file based 
        on a filename template (usually including the date).

        initalizeData - template file path to write to.
        
        traceOutputOptions - ignored
        
        convertWriteToEvent - if false (default), calls to Trace.Write() and Trace.WriteLine() are output directly to the file; if true, these messages are converted to event traces with
        a TraceEventType of Verbose (and formatted the same as other events).
        
        template - the format template to use (see above for values)

        <add name="rollingfile"
          type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics"
          initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
          convertWriteToEvent="false|true" 
          template="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
          />
      -->
      <add name="rollingfile"
        type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics"
        initializeData="C:\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
        convertWriteToEvent="true" />

      <!--
        RollingXmlTraceListener - Writes writes E2ETraceEvent XML fragments to a 
        text file, rolling to a new file based on a filename template (usually 
        including the date).
		
        The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.

        initalizeData - template file path to write to.
        
        traceOutputOptions - ignored
        
        <add name="rollingfile"
          type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics"
          initializeData="D:\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.svclog"
        />
      -->
      <add name="rollingxml"
        type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics"
        initializeData="C:\Logs\{ApplicationName}-{DateTime:yyyyMMdd}.svclog" />

      <!--
        SqlDatabaseTraceListener - Trace listener that writes to a database table.

        This listener writes to the database table created by the diagnostics_regsql 
        tool (via the stored procedure created by the tool). Usually all you need to
        provide is the name of the connection string of the database to use.
		
        Alternatively you can supply your own command text, which may use the SQL 
        parameters: @ApplicationName, @Source, @Id, @EventType, @UtcDateTime, 
            @MachineName, @AppDomainFriendlyName, @ProcessId, @ThreadName, 
            @Message, @ActivityId, @RelatedActivityId, @LogicalOperationStack, 
            @Data.
		
        See the diagnostics_regsql tool and the associated SQL file for details of
        the SQL parameters.
		
        initalizeData - Name of the connection string of the database to write to.

        traceOutputOptions - ignored
		
        applicationName - Application name to use when writing to the database; set this
        value when the database is shared between multiple applications. The 
        default value is an empty string.
		
        commandText - Command to use when calling the database. The default is
        the diagnostics_Trace_AddEntry stored procedure created by
        the diagnostics_regsql tool.
		
        maxMessageLength - Maximum length of the message text to write to the database,
        where the database column has limited size. Messages (after inserting
        format parameters) are trimmed to this length, with the last three
        characters replaced by "..." if the original message was longer. The default
        value is 1,500.
		
        <add name="sqldatabase"
          type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics" 
          initializeData=""
          applicationName=""
          commandText="EXEC diagnostics_Trace_AddEntry @ApplicationName, @Source, @Id, @EventType, @UtcDateTime, @MachineName, @AppDomainFriendlyName, @ProcessId, @ThreadName, @Message, @ActivityId, @RelatedActivityId, @LogicalOperationStack, @Data;"
          maxMessageLength="1500"
          />
      -->
      <add name="sqldatabase"
        type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics"
        initializeData="diagnosticsdb"
        applicationName="Diagnostics.Sample" />

    </sharedListeners>
    <sources>
      <!--
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName=""
              switchType=""
              propagateActivity="true|false">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      -->
    </sources>
    <switches>
      <!-- 
        Default config starts by clearing all switches:
        
        <clear />  
      -->
      <!--
        SourceSwitch, use flags values from SourceLevels:
      
        <add 
          name="SourceSwitch1" 
          value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All"
         />
        <add 
          name="SourceSwitch2" 
          value="0,1,3,7,15,31,0xFF00,0xFFFF"
         />
      -->
      <add name="SourceSwitch1" value="Information,ActivityTracing"/>
    </switches>
    <!--
      For legacy Trace.Write() statements (not using a TraceSource).
      Note: Indent can be confusing for multithreaded traces.
      
      <trace 
        autoflush="false|true" 
        indentsize="4" 
        useGlobalLock="true"
        >
      </trace>
    -->
    <trace autoflush="true" indentsize="0" >
      <listeners>
        <!-- 
          For performance you may want to clear the default listener:
          
          <add initializeData="" type="System.Diagnostics.DefaultTraceListener" name="Default" traceOutputOptions="None" >
            <filter type="" initializeData="" />
          </add>        
        -->
        <clear />
        <!--
          Listeners can be added by reference:

          <add name="Shared1" />
        -->
      </listeners>
    </trace>
  </system.diagnostics>
  <system.net>
    <mailSettings>
      <!--
        If using a test SMTP server, such as smtp4dev, you can change
        to deliveryMethod="Network".
      -->
      <smtp deliveryMethod="SpecifiedPickupDirectory" from="diagnostics@example.org">
        <network
          host="localhost"
          defaultCredentials="true" />
        <specifiedPickupDirectory pickupDirectoryLocation="C:\Temp\MailPickup" />
      </smtp>
    </mailSettings>
  </system.net>
</configuration>
