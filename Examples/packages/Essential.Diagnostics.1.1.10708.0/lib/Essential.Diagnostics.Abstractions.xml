<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Essential.Diagnostics.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Essential.Diagnostics.Abstractions.ITraceSource">
            <summary>
            Defines a set of methods and properties that enable applications to trace the 
            execution of code and associate trace messages with their source. 
            </summary>
            <remarks>
            <para>
            Using ITraceSource and TraceSourceWrapper, instead of directly using 
            System.Diagnostics.TraceSource, may make testing easier in some cases by
            allowing the entire tracing infrastructure to by bypassed by using
            a stub or mock implementation.
            </para>
            <para>
            Configuration using InMemoryTraceListener could achieve many of the
            same goals for testing, however using an interface may provide greater
            flexibility in some scenarios.
            </para>
            <para>
            Using the derived generic interface also provides a way to 
            automatically configure trace sources based on the target class
            (specifically naming the source after the assembly the class is from),
            which works well with dependency injection frameworks.
            </para>
            </remarks>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.Close">
            <summary>
            Closes all the trace listeners in the trace listener collection. 
            </summary>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.Flush">
            <summary>
            Flushes all the trace listeners in the trace listener collection. 
            </summary>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the 
            specified event type, event identifier, and trace data. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type 
            of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the specified event type, event identifier, and trace data array.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type 
            of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An object array containing the trace data.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes a trace event message to the trace listeners in the Listeners collection using the specified event type and event identifier. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes a trace event message to the trace listeners in the Listeners collection using the specified event type, event identifier, and message. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a trace event to the trace listeners in the Listeners collection using the specified event type, event identifier, and argument array and format. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceInformation(System.String)">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified object array and formatting information. 
            </summary>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.ITraceSource.TraceTransfer(System.Int32,System.String,System.Guid)">
            <summary>
            Writes a trace transfer message to the trace listeners in the Listeners collection using the specified numeric identifier, message, and related activity identifier. 
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
            <param name="relatedActivityId">A structure that identifies the related activity.</param>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.ITraceSource.Attributes">
            <summary>
            Gets the custom switch attributes defined in the application configuration file. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.ITraceSource.Listeners">
            <summary>
            Gets the collection of trace listeners for the trace source. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.ITraceSource.Name">
            <summary>
            Gets the name of the trace source. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.ITraceSource.Switch">
            <summary>
            Gets or sets the source switch value. 
            </summary>
        </member>
        <member name="T:Essential.Diagnostics.Abstractions.ITraceSource`1">
            <summary>
            Defines a set of methods and properties that enable applications to trace the 
            execution of code and associate trace messages with a source related to
            a specific class.
            </summary>
            <remarks>
            <para>
            The source is usually related to the specified class based on the class
            name or other properties, such as the assembly the class is from.
            </para>
            <para>
            For a suitable default implementation, which bases the source on the
            assembly the class is from see AssemblyTraceSource.
            </para>
            </remarks>
        </member>
        <member name="T:Essential.Diagnostics.Abstractions.TraceSourceWrapper">
            <summary>
            Provides a wrapper around TraceSource that implements the ITraceSource interface, 
            enable applications to trace the execution of code and associate trace messages 
            with their source in a decoupled manner. 
            </summary>
            <remarks>
            <para>
            Using ITraceSource and TraceSourceWrapper, instead of directly using 
            System.Diagnostics.TraceSource, may make testing easier in some cases by
            allowing the entire tracing infrastructure to by bypassed by using
            a stub or mock implementation.
            </para>
            <para>
            Configuration using InMemoryTraceListener could achieve many of the
            same goals for testing, however using an interface may provide greater
            flexibility in some scenarios.
            </para>
            <para>
            Using the derived generic interface also provides a way to 
            automatically configure trace sources based on the target class
            (specifically naming the source after the assembly the class is from),
            which works well with dependency injection frameworks.
            </para>
            </remarks>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TraceSourceWrapper class, using the specified name for the source. 
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.#ctor(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the TraceSource class, using the specified name for the source 
            and the default source level at which tracing is to occur. 
            </summary>
            <param name="name"></param>
            <param name="defaultLevel"></param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.#ctor(System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the TraceSourceWrapper class, using the specified TraceSource for the source. 
            </summary>
            <param name="traceSource"></param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.Close">
            <summary>
            Closes all the trace listeners in the trace listener collection. 
            </summary>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.Flush">
            <summary>
            Flushes all the trace listeners in the trace listener collection. 
            </summary>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the 
            specified event type, event identifier, and trace data. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type 
            of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the specified event type, event identifier, and trace data array.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type 
            of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An object array containing the trace data.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes a trace event message to the trace listeners in the Listeners collection using the specified event type and event identifier. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes a trace event message to the trace listeners in the Listeners collection using the specified event type, event identifier, and message. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a trace event to the trace listeners in the Listeners collection using the specified event type, event identifier, and argument array and format. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceInformation(System.String)">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified object array and formatting information. 
            </summary>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.TraceSourceWrapper.TraceTransfer(System.Int32,System.String,System.Guid)">
            <summary>
            Writes a trace transfer message to the trace listeners in the Listeners collection using the specified numeric identifier, message, and related activity identifier. 
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
            <param name="relatedActivityId">A structure that identifies the related activity.</param>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.TraceSourceWrapper.Attributes">
            <summary>
            Gets the custom switch attributes defined in the application configuration file. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.TraceSourceWrapper.Listeners">
            <summary>
            Gets the collection of trace listeners for the trace source. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.TraceSourceWrapper.Name">
            <summary>
            Gets the name of the trace source. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.TraceSourceWrapper.Switch">
            <summary>
            Gets or sets the source switch value. 
            </summary>
        </member>
        <member name="T:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1">
            <summary>
            Enable applications to trace the execution of code and associate trace 
            messages with a source named after the assembly the generic type
            is from.
            </summary>
            <remarks>
            <para>
            This class provides a way to automatically configure trace sources 
            based on the target class (specifically naming the source after the 
            assembly the class is from),which works well with dependency 
            injection frameworks.
            </para>
            <para>
            If using a dependency injection framework, by simply declaring
            a dependency of type ITraceSource`T and registering AssemblyTraceSource`T
            with the dependency injection container, classes will automatically
            get an ITraceSource based on their assembly name.
            </para>
            </remarks>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.#ctor">
            <summary>
            Initializes a new instance of the AssemblyTraceSource class. 
            </summary>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.#ctor(System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the AssemblyTraceSource class, using the specified default source level at which tracing is to occur. 
            </summary>
            <param name="defaultLevel"></param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.Close">
            <summary>
            Closes all the trace listeners in the trace listener collection. 
            </summary>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.Flush">
            <summary>
            Flushes all the trace listeners in the trace listener collection. 
            </summary>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the 
            specified event type, event identifier, and trace data. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type 
            of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace data to the trace listeners in the Listeners collection using the specified event type, event identifier, and trace data array.
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type 
            of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An object array containing the trace data.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes a trace event message to the trace listeners in the Listeners collection using the specified event type and event identifier. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes a trace event message to the trace listeners in the Listeners collection using the specified event type, event identifier, and message. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes a trace event to the trace listeners in the Listeners collection using the specified event type, event identifier, and argument array and format. 
            </summary>
            <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceInformation(System.String)">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified message.
            </summary>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the Listeners collection using the specified object array and formatting information. 
            </summary>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.TraceTransfer(System.Int32,System.String,System.Guid)">
            <summary>
            Writes a trace transfer message to the trace listeners in the Listeners collection using the specified numeric identifier, message, and related activity identifier. 
            </summary>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
            <param name="relatedActivityId">A structure that identifies the related activity.</param>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.Attributes">
            <summary>
            Gets the custom switch attributes defined in the application configuration file. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.Listeners">
            <summary>
            Gets the collection of trace listeners for the trace source. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.Name">
            <summary>
            Gets the name of the trace source. 
            </summary>
        </member>
        <member name="P:Essential.Diagnostics.Abstractions.AssemblyTraceSource`1.Switch">
            <summary>
            Gets or sets the source switch value. 
            </summary>
        </member>
    </members>
</doc>
