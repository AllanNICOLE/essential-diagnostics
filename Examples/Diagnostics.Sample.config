<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <connectionStrings>
    <!--
      diagnostics_regsql.exe tool
	  
      Use the following command line to install the default database on the 
      local SQL instance, using Windows credentials:
	  
      .\diagnostics_regsql.exe -E -AD
    -->
    <add name="diagnosticsdb" 
      providerName="System.Data.SqlClient" 
      connectionString="server=.;database=diagnosticsdb;Integrated Security=SSPI" />
  </connectionStrings>
  <system.diagnostics>
    <sharedListeners>
      <!-- 
        Common listener configuration includes name, type, initializeData,
        and traceOutputOptions. A listener may also have a filter.
        
        Note: If you try to add a filter to an existing listener (that doesn't already 
        have a filter) you will cause a NullReferenceException when Trace.Refresh()
        is called (such as by TraceConfigurationMonitor).
        
        A work around is to also change the name of the listener (effectively 
        creating a new one).
        
        <add 
          name="" 
          type="" 
          initializeData="" 
          traceOutputOptions="None,ProcessId,LogicalOperationStack,ThreadId,DateTime,Timestamp,Callstack"
          >
          <filter 
            type="" 
            initializeData="" 
            />
        </add>
        -->
      <!-- 
      Built-in Listeners (.NET Framework System.Diagnostics) 
      -->
      <!--
        ConsoleTraceListener - Writes to the console output or error stream.
        
        Each event includes the Source, EventType, Id and Message. Depending on 
        traceOutputOptions, additional lines may be written
        
        For an alternative that uses color to highlight event types and allows a
        customised output format see ColoredConsoleTraceListener.
        
        initalizeData - if false (default) the listener writes to the console output stream;
        if true the listener writes to the console error stream instead.
        
        traceOutputOptions - are written on separate lines after each trace output.
        
        <add name="console"
          type="System.Diagnostics.ConsoleTraceListener"
          initalizeData="false|true"
          traceOutputOptions="ProcessId,LogicalOperationStack,ThreadId,DateTime,Timestamp,Callstack"
          />
      -->
      <add name="console"
         type="System.Diagnostics.ConsoleTraceListener" />
      <!--
        FileLogTraceListener - Writes to a rolling text file.
        
        A new file is used when the maxFileSize is reached, as well as a daily or weekly
        basis as specified by logFileCreationSchedule. 
        
        Each file has a name in the format "<directory>\<baseFileName>(-<yyyy-MM-dd>)(-<seq>).log",
        with the local date included for daily and weekly rotation, and a sequence number
        appended if the file already exists.
        
        Directory is determined by the location enumeration, and customLocation (if using
        a custom location).
        
        Trace information is written to the file with Source, EventType, Id, and Message, 
        separated by the specified delimiter.
        
        If TraceData() is used, instead of TraceEvent(), then all Data items are written,
        each separated by the delimiter, instead of Message (the number of delimiters will
        vary based on the number of data items).
        
        Depending on traceOutputOptions the Callstack, LogicalOperationStack, 
        DateTime (UTC), ProcessId, ThreadId, and Timestamp are then written, separated
        by the delimiter. If the includeHostName option is set, then a final delimiter and
        the MachineName are also written.

        For an alternative that allows a customised output format and alternative creation
        frequencies, see RollingFileTraceListener.

        initalizeData - ignored.
        
        traceOutputOptions - appended to output, separated by the specified delimiter
        
        baseFileName - default is the application executable name
        
        customLocation - applies if location is Custom; default is Application.UserAppDataPath
        
        delimiter - default is tab delimited (in XML this is "&#x9;")
        
        encoding - default is UTF8, but may use any named encoding supported by Encoding.GetEncoding()
        
        logFileCreationSchedule - rotates logs on daily or weekly basis by appending the date
        
        <add name="filelog"
          type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
          initalizeData=""
          traceOutputOptions="Callstack,LogicalOperationStack,DateTime,ProcessId,ThreadId,Timestamp,"
          append="true|false"
          autoFlush="false|true"
          baseFileName=""
          customLocation=""
          delimiter="&#x9;"
          diskSpaceExhaustedBehavior="DiscardMessages|ThrowException"
          encoding="UTF8|encoding name"
          includeHostName="false|true"
          location="LocalUserApplicationDirectory|TempDirectory|CommonApplicationDirectory|ExecutableDirectory|Custom"
          logFileCreationSchedule="None|Daily|Weekly"
          maxFileSize="5000000"
          reserveDiskSpace="10000000"
          />
      -->
      <add name="filelog"
        type="Microsoft.VisualBasic.Logging.FileLogTraceListener"
        traceOutputOptions="DateTime,ProcessId,ThreadId" 
        customLocation="C:\Logs"
        location="Custom"
        logFileCreationSchedule="Daily" />
      <!--
        XmlWriterTraceListener - Writes E2ETraceEvent XML fragments to a file, suitable 
        for viewing using the Service Trace Viewer tool.
        
        For an alternative that supports rolling E2ETraceEvent files with various creation
        frequency (hourly, daily, weekly), see RollingXmlTraceListener.
        
        initalizeData - path of the file to write to.
        
        traceOutputOptions - ignored.
        
        <add name="xmlwriter"
          type="System.Diagnostics.XmlWriterTraceListener"
          initalizeData=""
          />
      -->
      <add name="xmlwriter"
           type="System.Diagnostics.XmlWriterTraceListener"
           initializeData="C:\Logs\Trace.svclog" />
      <!--
        EventLogTraceListener - Writes to the Windows Event Log.

        Events are logged with the event Id (maximum 65535), and with a severity based on
        the EventType (Critial and Error are logged as errors, Warning is logged as a 
        warning, all others as information).
        
        The message, or non-empty formatted message with arguments inserted is written as
        the event entry data. If TraceData() is used, then the data items are concatenated 
        with ", " and then written as the event entry data.
        
        If, however, a null or empty format message is used then the format arguments
        are used directly as the event entry data - this allows them to be used as 
        multiple replacement strings for an event log entry ID specified in a registered
        DLL. (See EventLog.WriteEvent() for details.)
        
        Usually you will want to filter events sent to the Windows Event Log to only
        include those above a certain level / event type.

        Note: You must include an installer (that is run by an administrator)
        to create the event log source (specified in initializeData), otherwise events 
        cannot be written to it by normal process accounts. This limits the values that
        can be used in initializeData to created event log sources.
        
        initalizeData - name of the event log source
        
        traceOutputOptions - ignored.
        
        <add name="eventlog"
          type="System.Diagnostics.EventLogTraceListener"
          initalizeData=""
          />
  		-->
      <add name="eventlog"
        type="System.Diagnostics.EventLogTraceListener"
        initializeData="Diagnostics.Sample">
        <filter type="System.Diagnostics.EventTypeFilter"
                initializeData="Warning" />
      </add>
      <!-- 
      Essential.Diagnostics Listeners
      -->
      <!--
        ColoredConsoleTraceListener - Writes to the console output or error stream,
        using color to highlight event types and allowing a customised output format.
        
        The event and context information can be formatted using a custom format
        string containing argument tokens in curly braces. Standard .NET formatting
        can be applied to these values, e.g. "{DateTime:yyyy-MM-dd}" outputs the
        year, month and day.
        
        The following parameters are available in the template string:
        Data, Data0, EventType, Id, Message, ActivityId, RelatedActivityId, Source, 
        Callstack, DateTime (or UtcDateTime), LocalDateTime, LogicalOperationStack, 
        ProcessId, ThreadId, Timestamp, MachineName, ProcessName, ThreadName,
        ApplicationName.

        The default format is "{Source} {EventType}: {Id} : {Message}", and default colors
        used are Red for Critical, DarkRed for Error, Yellow for Warning, DarkCyan for Verbose,
        and Gray for all other messages.
                
        initalizeData - if false (default) the listener writes to the console output stream;
        if true the listener writes to the console error stream instead.
        
        traceOutputOptions - are written on separate lines after each trace output in a fixed
        format; largely redundant as the template can be used to format as desired
        
        activityTracingColor (and other Color properties) - ConsoleColor to use for the corresponding
        events

        convertWriteToEvent - if false (default), calls to Trace.Write() and Trace.WriteLine() are output
        directly to the console stream; if true, these messages are converted to event traces with
        a TraceEventType of Verbose (and formatted the same as other events).
        
        template - the format template to use (see above for values)
        
        <add name="coloredconsole"
          type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics"
          initalizeData="false|true"
          traceOutputOptions="ProcessId,LogicalOperationStack,ThreadId,DateTime,Timestamp,Callstack"
          activityTracingColor="Black|Blue|Cyan|DarkBlue|DarkCyan|DarkGray|DarkGreen|DarkMagenta|DarkRed|DarkYellow|Gray|Green|Magenta|Red|White|Yellow"
          convertWriteToEvent="false|true"
          criticalColor="<color>"
          errorColor="<color>"
          informationColor="<color>"
          resumeColor="<color>"
          startColor="<color>"
          stopColor="<color>"
          suspendColor="<color>"
          template=""
          transferColor="<color>" 
          verboseColor="<color>"
          warningColor="<color>"
          />
      -->
      <add name="coloredconsole"
        type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics"
        template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
        convertWriteToEvent="true" />
      <!--
        InMemoryTraceListener - Records trace events in memory, within a circular buffer. 
        The buffer limit can be set by the initialization data.
		
        Trace events are copied to an immutable format, so values are recorded as at the
        time of the trace. A copy of the current buffer can be retrieved from the object.
		
        This class can be useful for testing.
		
        initalizeData - integer size of the circular buffer; the default is 20.

        traceOutputOptions - ignored
		
        <add name="inmemory"
          type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" 
          initalizeData="20"
		  />
	  -->
      <add name="inmemory"
        type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" />
      <!--
        SqlDatabaseTraceListener - Trace listener that writes to a database table.

        This listener writes to the database table created by the diagnostics_regsql 
        tool (via the stored procedure created by the tool). Usually all you need to
        provide is the name of the connection string of the database to use.
		
        Alternatively you can supply your own command text, which may use the SQL 
        parameters: @ApplicationName, @Source, @Id, @EventType, @UtcDateTime, 
            @MachineName, @AppDomainFriendlyName, @ProcessId, @ThreadName, 
            @Message, @ActivityId, @RelatedActivityId, @LogicalOperationStack, 
            @Data.
		
        See the diagnostics_regsql tool and the associated SQL file for details of
        the SQL parameters.
		
        initalizeData - Name of the connection string of the database to write to.

        traceOutputOptions - ignored
		
        applicationName - Application name to use when writing to the database; set this
        value when the database is shared between multiple applications. The 
        default value is an empty string.
		
        commandText - Command to use when calling the database. The default is
        the diagnostics_Trace_AddEntry stored procedure created by
        the diagnostics_regsql tool.
		
        maxMessageLength - Maximum length of the message text to write to the database,
        where the database column has limited size. Messages (after inserting
        format parameters) are trimmed to this length, with the last three
        characters replaced by "..." if the original message was longer. The default
        value is 1,500.
		
        <add name="sqldatabase"
          type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics" 
          initializeData=""
          applicationName=""
          commandText="EXEC diagnostics_Trace_AddEntry @ApplicationName, @Source, @Id, @EventType, @UtcDateTime, @MachineName, @AppDomainFriendlyName, @ProcessId, @ThreadName, @Message, @ActivityId, @RelatedActivityId, @LogicalOperationStack, @Data;"
          maxMessageLength="1500"
          />
      -->
      <add name="sqldatabase"
        type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics"
        initializeData="diagnosticsdb"
        applicationName="Diagnostics.Sample" />
      <!--
        RollingFileTraceListener - Writes to a text file, rolling to a new file based 
        on a filename template (usually including the date).

        initalizeData - template file path to write to.
        
        traceOutputOptions - ignored
        
        convertWriteToEvent - if false (default), calls to Trace.Write() and Trace.WriteLine() are output directly to the file; if true, these messages are converted to event traces with
        a TraceEventType of Verbose (and formatted the same as other events).
        
        template - the format template to use (see above for values)

        <add name="rollingfile"
          type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics"
          initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
          convertWriteToEvent="false|true" 
          template="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
          />
      -->
      <add name="rollingfile"
        type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics"
        initializeData="C:\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
        convertWriteToEvent="true" />
      <!--
        RollingXmlTraceListener - Writes writes E2ETraceEvent XML fragments to a 
        text file, rolling to a new file based on a filename template (usually 
        including the date).
		
        The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.

        initalizeData - template file path to write to.
        
        traceOutputOptions - ignored
        
        <add name="rollingfile"
          type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics"
          initializeData="D:\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.svclog"
        />
      -->
      <add name="rollingxml"
        type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics"
        initializeData="C:\Logs\{ApplicationName}-{DateTime:yyyyMMdd}.svclog" />
    </sharedListeners>
    <sources>
      <!--
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName=""
              switchType=""
              propagateActivity="true|false">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      -->
      <source name="System.ServiceModel"
              switchValue="Information, ActivityTracing"
              propagateActivity="true">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <source name="CardSpace">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <source name="System.IO.Log">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <source name="System.Runtime.Serialization">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <source name="System.IdentityModel">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
    </sources>
    <switches>
      <!-- 
        Default config starts by clearing all switches:
        
        <clear />  
      -->
      <!--
        BooleanSwitch, uses boolean values:
      
        <add 
          name="BoolenSwitch1" 
          value="False|True"
          />
        <add 
          name="BoolenSwitch2" 
          value="0|1"
          />
      -->
      <add name="BooleanSwitch1" value="True"/>
      <!--
        TraceSwitch, uses values from TraceLevel:
       
        <add 
          name="TraceSwitch1" 
          value="Error|Warning|Info|Verbose"
         />
        <add 
          name="TraceSwitch2" 
          value="1|2|3|4"
         />
      -->
      <add name="TraceSwitch1" value="Info"/>
      <!--
        SourceSwitch, use flags values from SourceLevels:
      
        <add 
          name="SourceSwitch1" 
          value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All"
         />
        <add 
          name="SourceSwitch2" 
          value="0,1,3,7,15,31,0xFF00,0xFFFF"
         />
      -->
      <add name="SourceSwitch1" value="Information,ActivityTracing"/>
    </switches>
    <!--
      For legacy Trace.Write() statements (not using a TraceSource).
      Note: Indent can be confusing for multithreaded traces.
      
      <trace 
        autoflush="false|true" 
        indentsize="4" 
        useGlobalLock="true"
        >
      </trace>
    -->
    <trace autoflush="true" indentsize="0" >
      <listeners>
        <!-- 
          For performance you may want to clear the default listener:
          
          <add initializeData="" type="System.Diagnostics.DefaultTraceListener" name="Default" traceOutputOptions="None" >
            <filter type="" initializeData="" />
          </add>        
        -->
        <clear />
        <!--
          Listeners can be added by reference:

          <add name="Shared1" />
        -->
        <add name="Shared1" />
      </listeners>
    </trace>
  </system.diagnostics>
</configuration>
