<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <system.diagnostics>
    <sharedListeners>

      <!-- 
        Common listener configuration includes name, type, initializeData,
        and traceOutputOptions. A listener may also have a filter.
        
        Note: If you try to add a filter to an existing listener (that doesn't already 
        have a filter) you will cause a NullReferenceException when Trace.Refresh()
        is called (such as by TraceConfigurationMonitor).
        
        A work around is to also change the name of the listener (effectively 
        creating a new one).
        
        <add 
          name="" 
          type="" 
          initializeData="" 
          traceOutputOptions="None,ProcessId,LogicalOperationStack,ThreadId,DateTime,Timestamp,Callstack"
          >
          <filter 
            type="" 
            initializeData="" 
            />
        </add>
        -->
      
      <!-- 
      Built-in Listeners (.NET Framework System.Diagnostics) 
      -->
      
      <!--
        ConsoleTraceListener - Writes to the console output or error stream.
        
        Each event includes the Source, EventType, Id and Message. Depending on 
        traceOutputOptions, additional lines may be written
        
        For an alternative that uses color to highlight event types and allows a
        customised output format see ColoredConsoleTraceListener.
        
        initalizeData - if false (default) the listener writes to the console output stream;
        if true the listener writes to the console error stream instead.
        
        traceOutputOptions - are written on separate lines after each trace output.
        
        <add name="console"
          type="System.Diagnostics.ConsoleTraceListener"
          initalizeData="false|true"
          traceOutputOptions="ProcessId,LogicalOperationStack,ThreadId,DateTime,Timestamp,Callstack"
          />
      -->
      <add name="console"
         type="System.Diagnostics.ConsoleTraceListener" />
      
      <!--
        EventLogTraceListener - Writes to the Windows Event Log.

        Events are logged with the event Id (maximum 65535), and with a severity based on
        the EventType (Critial and Error are logged as errors, Warning is logged as a 
        warning, all others as information).
        
        The message, or non-empty formatted message with arguments inserted is written as
        the event entry data. If TraceData() is used, then the data items are concatenated 
        with ", " and then written as the event entry data.
        
        If, however, a null or empty format message is used then the format arguments
        are used directly as the event entry data - this allows them to be used as 
        multiple replacement strings for an event log entry ID specified in a registered
        DLL. (See EventLog.WriteEvent() for details.)
        
        Usually you will want to filter events sent to the Windows Event Log to only
        include those above a certain level / event type.

        Note: You must include an installer (that is run by an administrator)
        to create the event log source (specified in initializeData), otherwise events 
        cannot be written to it by normal process accounts. This limits the values that
        can be used in initializeData to created event log sources.
        
        initalizeData - name of the event log source
        
        traceOutputOptions - ignored.
        
        <add name="eventlog"
          type="System.Diagnostics.EventLogTraceListener"
          initalizeData=""
          />
  		-->
      <add name="eventlog"
        type="System.Diagnostics.EventLogTraceListener"
        initializeData="Diagnostics.Sample">
        <filter type="System.Diagnostics.EventTypeFilter"
                initializeData="Warning" />
      </add>
      
      <!--
        FileLogTraceListener - Writes to a rolling text file.
        
        A new file is used when the maxFileSize is reached, as well as a daily or weekly
        basis as specified by logFileCreationSchedule. 
        
        Each file has a name in the format "<directory>\<baseFileName>(-<yyyy-MM-dd>)(-<seq>).log",
        with the local date included for daily and weekly rotation, and a sequence number
        appended if the file already exists.
        
        Directory is determined by the location enumeration, and customLocation (if using
        a custom location).
        
        Trace information is written to the file with Source, EventType, Id, and Message, 
        separated by the specified delimiter.
        
        If TraceData() is used, instead of TraceEvent(), then all Data items are written,
        each separated by the delimiter, instead of Message (the number of delimiters will
        vary based on the number of data items).
        
        Depending on traceOutputOptions the Callstack, LogicalOperationStack, 
        DateTime (UTC), ProcessId, ThreadId, and Timestamp are then written, separated
        by the delimiter. If the includeHostName option is set, then a final delimiter and
        the MachineName are also written.

        For an alternative that allows a customised output format and alternative creation
        frequencies, see RollingFileTraceListener.

        initalizeData - ignored.
        
        traceOutputOptions - appended to output, separated by the specified delimiter
        
        baseFileName - default is the application executable name
        
        customLocation - applies if location is Custom; default is Application.UserAppDataPath
        
        delimiter - default is tab delimited (in XML this is "&#x9;")
        
        encoding - default is UTF8, but may use any named encoding supported by Encoding.GetEncoding()
        
        logFileCreationSchedule - rotates logs on daily or weekly basis by appending the date
        
        <add name="filelog"
          type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
          initalizeData=""
          traceOutputOptions="Callstack,LogicalOperationStack,DateTime,ProcessId,ThreadId,Timestamp,"
          append="true|false"
          autoFlush="false|true"
          baseFileName=""
          customLocation=""
          delimiter="&#x9;"
          diskSpaceExhaustedBehavior="DiscardMessages|ThrowException"
          encoding="UTF8|encoding name"
          includeHostName="false|true"
          location="LocalUserApplicationDirectory|TempDirectory|CommonApplicationDirectory|ExecutableDirectory|Custom"
          logFileCreationSchedule="None|Daily|Weekly"
          maxFileSize="5000000"
          reserveDiskSpace="10000000"
          />
      -->
      <add name="filelog"
        type="Microsoft.VisualBasic.Logging.FileLogTraceListener"
        traceOutputOptions="DateTime,ProcessId,ThreadId" 
        customLocation="C:\Logs"
        location="Custom"
        logFileCreationSchedule="Daily" />
      
      <!--
        XmlWriterTraceListener - Writes E2ETraceEvent XML fragments to a file, suitable 
        for viewing using the Service Trace Viewer tool.
        
        For an alternative that supports rolling E2ETraceEvent files with various creation
        frequency (hourly, daily, weekly), see RollingXmlTraceListener.
        
        initalizeData - path of the file to write to.
        
        traceOutputOptions - ignored.
        
        <add name="xmlwriter"
          type="System.Diagnostics.XmlWriterTraceListener"
          initalizeData=""
          />
      -->
      <add name="xmlwriter"
           type="System.Diagnostics.XmlWriterTraceListener"
           initializeData="C:\Logs\Trace.svclog" />
      
    </sharedListeners>
    <sources>
      <!--
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName=""
              switchType=""
              propagateActivity="true|false">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      -->
      <!-- See: http://msdn.microsoft.com/en-us/library/ms733025.aspx -->
      <source name="CardSpace">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <!-- See: http://msdn.microsoft.com/en-us/library/ee517282.aspx -->
      <source name="Microsoft.IdentityModel">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <source name="System.IO.Log">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <source name="System.Net" >
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
      <source name="System.Net.Sockets">
        <listeners>
          <add name="xml"/>
        </listeners>
      </source>
      <source name="System.Runtime.Serialization">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <!-- See: http://msdn.microsoft.com/en-us/library/ms730064.aspx -->
      <source name="System.ServiceModel"
              switchValue="Information, ActivityTracing"
              propagateActivity="true">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging">
        <listeners>
          <add name="xml" />
        </listeners>
      </source>
    </sources>
    <switches>
      <!-- 
        Default config starts by clearing all switches:
        
        <clear />  
      -->
      <!--
        BooleanSwitch, uses boolean values:
      
        <add 
          name="BoolenSwitch1" 
          value="False|True"
          />
        <add 
          name="BoolenSwitch2" 
          value="0|1"
          />
      -->
      <add name="BooleanSwitch1" value="True"/>
      <!--
        TraceSwitch, uses values from TraceLevel:
       
        <add 
          name="TraceSwitch1" 
          value="Error|Warning|Info|Verbose"
         />
        <add 
          name="TraceSwitch2" 
          value="1|2|3|4"
         />
      -->
      <add name="TraceSwitch1" value="Info"/>
      <!--
        SourceSwitch, use flags values from SourceLevels:
      
        <add 
          name="SourceSwitch1" 
          value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All"
         />
        <add 
          name="SourceSwitch2" 
          value="0,1,3,7,15,31,0xFF00,0xFFFF"
         />
      -->
      <add name="SourceSwitch1" value="Information,ActivityTracing"/>
    </switches>
    <!--
      For legacy Trace.Write() statements (not using a TraceSource).
      Note: Indent can be confusing for multithreaded traces.
      
      <trace 
        autoflush="false|true" 
        indentsize="4" 
        useGlobalLock="true"
        >
      </trace>
    -->
    <trace autoflush="true" indentsize="0" >
      <listeners>
        <!-- 
          For performance you may want to clear the default listener:
          
          <add initializeData="" type="System.Diagnostics.DefaultTraceListener" name="Default" traceOutputOptions="None" >
            <filter type="" initializeData="" />
          </add>        
        -->
        <clear />
        <!--
          Listeners can be added by reference:

          <add name="Shared1" />
        -->
        <add name="Shared1" />
      </listeners>
    </trace>
  </system.diagnostics>
  <system.serviceModel>
    <diagnostics>
      <messageLogging
           logEntireMessage="true"
           logMalformedMessages="false"
           logMessagesAtServiceLevel="true"
           logMessagesAtTransportLevel="false"
           maxMessagesToLog="3000"
           maxSizeOfMessageToLog="2000"/>
    </diagnostics>
  </system.serviceModel>
</configuration>
